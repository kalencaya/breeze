<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.liyu.breeze.dao.mapper.UserMapper">

    <!-- 通用查询映射结果 -->
    <resultMap id="UserMap" type="com.liyu.breeze.dao.entity.User">
        <result column="id" property="id"/>
        <result column="creator" property="creator"/>
        <result column="create_time" property="createTime"/>
        <result column="editor" property="editor"/>
        <result column="update_time" property="updateTime"/>
        <result column="user_name" property="userName"/>
        <result column="nick_name" property="nickName"/>
        <result column="email" property="email"/>
        <result column="password" property="password"/>
        <result column="real_name" property="realName"/>
        <result column="id_card_type" property="idCardType"/>
        <result column="id_card_no" property="idCardNo"/>
        <result column="gender" property="gender"/>
        <result column="nation" property="nation"/>
        <result column="birthday" property="birthday"/>
        <result column="qq" property="qq"/>
        <result column="wechat" property="wechat"/>
        <result column="mobile_phone" property="mobilePhone"/>
        <result column="user_status" property="userStatus"/>
        <result column="summary" property="summary"/>
        <result column="register_channel" property="registerChannel"/>
        <result column="register_time" property="registerTime"/>
        <result column="register_ip" property="registerIp"/>
    </resultMap>

    <select id="selectPage" resultMap="UserMap">
        select t.id,
        t.user_name,
        t.nick_name,
        t.email,
        t.real_name,
        t.id_card_type,
        t.id_card_no,
        t.gender,
        t.nation,
        t.birthday,
        t.qq,
        t.wechat,
        t.mobile_phone,
        t.user_status,
        t.summary,
        t.register_channel,
        t.register_time,
        t.register_ip,
        t.creator,
        t.create_time,
        t.editor,
        t.update_time
        from t_user t
        <where>
            <if test="user.userName != null and user.userName != ''">
                and t.user_name like concat('%',#{user.userName,jdbcType=VARCHAR},'%')
            </if>
            <if test="user.nickName != null and user.nickName != ''">
                and t.nick_name like concat('%',#{user.nickName,jdbcType=VARCHAR},'%')
            </if>
            <if test="user.email != null and user.email != ''">
                and t.email like concat('%',#{user.email,jdbcType=VARCHAR},'%')
            </if>
            <if test="user.userStatus != null and user.userStatus != ''">
                and t.user_status = #{user.userStatus,jdbcType=VARCHAR}
            </if>
            <choose>
                <when test="roleId != null and roleId != '' ">
                    and exists (select 1 from t_user_role ur where t.id = ur.user_id
                    and ur.role_id = #{roleId,jdbcType=BIGINT} )
                </when>
                <when test="deptId != null and deptId != '' ">
                    and exists (select 1 from t_user_dept ud where t.id = ud.user_id
                    and ud.dept_id = #{deptId,jdbcType=BIGINT} )
                </when>
            </choose>
        </where>
    </select>


    <select id="selectByRoleOrDept" resultMap="UserMap">
        select t.id,
        t.user_name,
        t.nick_name,
        t.email,
        t.real_name,
        t.id_card_type,
        t.id_card_no,
        t.gender,
        t.nation,
        t.birthday,
        t.qq,
        t.wechat,
        t.mobile_phone,
        t.user_status,
        t.summary,
        t.register_channel,
        t.register_time,
        t.register_ip,
        t.creator,
        t.create_time,
        t.editor,
        t.update_time
        from t_user t
        <where>
            <choose>
                <when test="roleId != null and roleId != '' and direction == '0'.toString() ">
                    and not exists (select 1 from t_user_role ur where t.id = ur.user_id
                    and ur.role_id = #{roleId,jdbcType=BIGINT} )
                </when>
                <when test="roleId != null and roleId != '' and direction == '1'.toString() ">
                    and exists (select 1 from t_user_role ur where t.id = ur.user_id
                    and ur.role_id = #{roleId,jdbcType=BIGINT} )
                </when>
                <when test="deptId != null and deptId != '' and direction == '0'.toString() ">
                    and not exists (select 1 from t_user_dept ud where t.id = ud.user_id
                    and ud.dept_id = #{deptId,jdbcType=BIGINT} )
                </when>
                <when test="deptId != null and deptId != '' and direction == '1'.toString() ">
                    and exists (select 1 from t_user_dept ud where t.id = ud.user_id
                    and ud.dept_id = #{deptId,jdbcType=BIGINT} )
                </when>
            </choose>
            <if test="userName != null and userName != '' ">
                and t.user_name like concat('%',#{userName,jdbcType=VARCHAR},'%')
            </if>
        </where>
        limit 200
    </select>

    <select id="selectAllPrivilege" resultMap="com.liyu.breeze.dao.mapper.RoleMapper.RoleWithPrivilegeMap">
        <![CDATA[
         select distinct
                role.role_id as id,
                role.role_code,
                p.privilege_code,
                p.privilege_name,
                p.resource_path,
                p.resource_type
           from (select t.id,
                        ar.role_id,
                        r.role_code
                   from t_user t
                   join t_user_role ar
                     on t.id = ar.user_id
                   join t_role r
                     on ar.role_id = r.id
                  where t.user_name = #{userName,jdbcType=VARCHAR}
                    and ar.role_id is not null
                  union
                 select t.id,
                        dr.role_id,
                        r.role_code
                   from t_user t
                   join t_user_dept ad
                     on t.id = ad.user_id
                   join t_dept_role dr
                     on ad.dept_id = dr.dept_id
                   join t_role r
                     on dr.role_id = r.id
                  where t.user_name = #{userName,jdbcType=VARCHAR}
                    and dr.role_id is not null) role
           left join(select rp.role_id,
			                rp.privilege_id,
			                p.privilege_code,
			                p.privilege_name,
			                p.resource_path,
			                p.resource_type
			           from t_role_privilege rp
		               join t_privilege p
                         on rp.privilege_id = p.id) p
             on p.role_id = role.role_id
        ]]>
    </select>
</mapper>
